{"ast":null,"code":"var _jsxFileName = \"/Users/672682/personal projects/chat-app/client/src/Components/Chat/Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport './Chat.css';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const END_POINT = 'localhost:4002';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    setName(name);\n    setRoom(room);\n    socket = io(END_POINT);\n    socket.emit('join', {\n      name: name,\n      room: room\n    }); // console.log(socket)\n  }, [END_POINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n    console.log('from 2nd use effect', messages);\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, messages.map(m => React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, m)), React.createElement(\"input\", {\n    placeholder: \"type a message\",\n    value: message,\n    onChange: event => setMessage(event.target.value),\n    onKeyPress: event => event.key === 'enter' ? sendMessage(event) : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/672682/personal projects/chat-app/client/src/Components/Chat/Chat.js"],"names":["React","useEffect","useState","io","queryString","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","END_POINT","parse","search","emit","on","console","log","sendMessage","event","preventDefault","map","m","target","value","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAO,YAAP;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAEzB,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBP,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACQ,IAAD,EAAMC,OAAN,IAAiBT,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMc,SAAS,GAAG,gBAAlB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACO,MAAAA,IAAD;AAAME,MAAAA;AAAN,QAAcN,WAAW,CAACa,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAApB;AACAT,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,GAAGF,EAAE,CAACa,SAAD,CAAX;AAEAX,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAmB;AAACX,MAAAA,IAAI,EAAEA,IAAP;AAAaE,MAAAA,IAAI,EAAEA;AAAnB,KAAnB,EAPY,CASZ;AACH,GAVQ,EAUP,CAACM,SAAD,EAAWT,QAAQ,CAACW,MAApB,CAVO,CAAT;AAYAjB,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,MAAM,CAACe,EAAP,CAAU,SAAV,EAAsBR,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGAS,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCR,QAAlC;AACH,GALQ,EAKP,CAACA,QAAD,CALO,CAAT;;AAOA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGb,OAAH,EAAW;AACPP,MAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACH;AACH,GAND;;AAQAQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ,EAAqBE,QAArB;AAEA,SAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMA,QAAQ,CAACY,GAAT,CAAcC,CAAD,IAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,CAAL,CAApB,CAFN,EAGI;AACA,IAAA,WAAW,EAAC,gBADZ;AAEA,IAAA,KAAK,EAAEf,OAFP;AAGA,IAAA,QAAQ,EAAGY,KAAD,IAAWX,UAAU,CAACW,KAAK,CAACI,MAAN,CAAaC,KAAd,CAH/B;AAIA,IAAA,UAAU,EAAIL,KAAK,IAAIA,KAAK,CAACM,GAAN,KAAc,OAAd,GAAwBP,WAAW,CAACC,KAAD,CAAnC,GAA6C,IAJpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ;AAcH,CAnDD;;AAqDA,eAAelB,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport io from 'socket.io-client'\nimport queryString from 'query-string'\nimport './Chat.css'\n\nlet socket;\n\nconst Chat = ({location}) => {\n\n    const [name,setName] = useState('')\n    const [room,setRoom] = useState('')\n    const [message, setMessage] = useState('')\n    const [messages, setMessages] = useState([])\n    const END_POINT = 'localhost:4002'\n\n    useEffect(() => {\n        const {name,room} = queryString.parse(location.search)\n        setName(name)\n        setRoom(room)\n\n        socket = io(END_POINT)\n\n        socket.emit('join',{name: name, room: room})\n\n        // console.log(socket)\n    },[END_POINT,location.search])\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            setMessages([...messages, message])\n        })\n        console.log('from 2nd use effect',messages)\n    },[messages])\n\n    const sendMessage = (event) => {\n       event.preventDefault()\n\n       if(message){\n           socket.emit('sendMessage', message, () => setMessage(''))\n       }\n    }\n    \n    console.log(message, messages);\n    \n    return (\n        \n        <div className='container'>\n            {/* <h1>{`welcome ${name}`}</h1> */}\n            { messages.map((m) => <h1>{m}</h1> ) }\n            <input\n            placeholder='type a message'\n            value={message}\n            onChange={(event) => setMessage(event.target.value)}\n            onKeyPress = {event => event.key === 'enter' ? sendMessage(event) : null }\n            >\n            </input>\n        </div>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}